<?xml version="1.0" encoding="utf-8"?>
<specification>
  <head>
    <title>Darwin Language Specification</title>
    <author>Paul Vick</author>
    <version>Version 1.0</version>
    <draft>Draft 1</draft>
  </head>
  <body>
    <section title="Introduction">
      <text>
        Darwin is a general purpose programming language for .NET Core.
      </text>
      <section title="Grammar Notation">
        <text>
          This specification specifies a lexical and a syntatic grammar. Each grammar is defined using a set of
          <def>rules</def>. Each rule starts with a name followed by a colon and then a set of <def>productions</def>,
          one per line. The productions of a rule define the different possible ways to match the rule. For example 
          the following:
        </text>
        <grammar>
          <syntax name="expression" ignore="true">
            <production>
              <nt>literal</nt>
            </production>
            <production>
              <nt>expression</nt>
              <nt>operator</nt>
              <nt>expression</nt>
            </production>
          </syntax>
        </grammar>
        <text>
          defines a rule <i>expression</i> that either matches a single <i>literal</i> or an <i>expression</i>
          followed by an <i>operator</i> and then another <i>expression</i>. The rule named <i>start</i> is the start
          rule for a grammar.
        </text>
        <text>
          A production contains a set of sequential <def>terms</def>. A term can be one of the following:
        </text>
        <bulletedList>
          <bulletedText>
            <em>A string.</em> Strings are specified in quotes ('<c>if</c>') and match the given sequence of
            Unicode characters.
          </bulletedText>
          <bulletedText>
            <em>A meta-string.</em> A meta-string is specified by angle brackets and describes the string matched
            informally. (For example, "&lt; the Unicode value U+0000 &gt;".)
          </bulletedText>
          <bulletedText>
            <em>A rule name.</em> A rule name is specified in <i>italics</i> and matches the rule named.
          </bulletedText>
          <bulletedText>
            <em>A group.</em> A list of terms can be contained by parenthesis ("()") to allow multiple terms to be
            modified by repetition operators.
          </bulletedText>
          <bulletedText>
            <em>A range.</em> A range of character values can be specified by separating them with two dots ("..").
          </bulletedText>
        </bulletedList>
        <text>
          Terms can be modified with the repetition operators "?", "+", and "*". The operator "?" indicates a term is
          optional and can appear zero or one times. The operator "+" indicates a term must appear one or more times.
          And the operator "*" indicates a term may appear zero or more times.
        </text>
        <alert>
          <em>Note:</em> The grammars in this specification are not intended to be formal grammars (that is, usable
          by any particular parser or lexer generator).
        </alert>
      </section>
    </section>
    <section title="Lexical Grammar">
      <text>
        The first step in processing Darwin code is to translate a stream of Unicode characters into an ordered set
        of lexical tokens.
      </text>
      <alert>
        <em>Note:</em> All references to "Unicode" in this specification refer to Unicode version 9.0.
      </alert>
      <grammar>
        <token name="start">
          <production>
            <star>
              <nt>token</nt>
            </star>
          </production>
        </token>
        <token name="token">
          <production>
            <nt>whitespace</nt>
          </production>
          <production>
            <nt>comment</nt>
          </production>
          <production>
            <nt>identifier</nt>
          </production>
          <production>
            <nt>literal</nt>
          </production>
          <production>
            <nt>punctuator</nt>
          </production>
          <production>
            <nt>operator</nt>
          </production>
        </token>
      </grammar>
      <section title="Whitespace">
        <text>
          <def>Whitespace</def> serves to separate tokens but has no other significance in the language. Whitespace is
          defined as any character with the Unicode property <c>White_Space</c>. A <def>line terminator</def> is
          whitespace that marks the lexical end of a line.
        </text>
        <grammar>
          <token name="whitespace">
            <production>
              <meta>Any Unicode character with the property 'White_Space' except a line-terminator</meta>
            </production>
            <production>
              <nt>line-terminator</nt>
            </production>
          </token>
          <token name="line-terminator">
            <production>
              <meta>Carriage return character (U+000D)</meta>
            </production>
            <production>
              <meta>Line feed character (U+000A)</meta>
            </production>
            <production>
              <meta>Carriage return character (U+000D)</meta>
              <meta>Line feed character (U+000A)</meta>
            </production>
          </token>
        </grammar>
      </section>
      <section title="Comments">
        <text>
          <def>Comments</def> are text that serve as comments on the source code and are treated as whitespace. 
          A comment extends only until the next line terminator.
        </text>
        <grammar>
          <token name="comment">
            <production>
              <t>#</t>
              <star>
                <nt>comment-element</nt>
              </star>
            </production>
          </token>
          <token name="comment-element">
            <production>
              <meta>Any Unicode character except a <nt>line-terminator</nt>.</meta>
            </production>
          </token>
        </grammar>
      </section>
      <section title="Identifiers">
        <text>
          An <def>identifier</def> is a name. Darwin identifiers conform to the Unicode Standard Annex 31, version 9.0.
          The language includes the following requirements from that specification:
        </text>
        <bulletedList>
          <bulletedText>
            <em>UAX31-R1</em>: Darwin specifies a profile that includes the underscore (<c>_</c>) character in
            the <c>Start</c> set. It also removes the <c>Other_ID_Start</c> characters from <c>Start</c> and
            <c>Other_ID_Continue</c> characters from <c>Continue</c>, as backwards compatibility with previous Unicode
            specifications is not a concern.
          </bulletedText>
          <bulletedText>
            <em>UAX31-R4</em>: Darwin normalizes identifiers using normalization form NFC.
          </bulletedText>
        </bulletedList>
        <text>
          Two things are worth noting regarding Darwin identifiers. First, unlike some languages, Unicode formatting
          characters are not allowed in identifiers to reduce the possibility of confusion between identical looking
          identifiers. Second, Darwin defines no reserved keywords.
        </text>
        <grammar>
          <token name="identifier">
            <production>
              <nt>identifier-start</nt>
              <opt>
                <nt>identifier-character</nt>
              </opt>
            </production>
          </token>
          <token name="identifier-start">
            <production>
              <nt>letter-character</nt>
            </production>
            <production>
              <t>_</t>
            </production>
          </token>
          <token name="identifier-character">
            <production>
              <nt>connector-character</nt>
            </production>
            <production>
              <nt>letter-character</nt>
            </production>
            <production>
              <nt>decimal-character</nt>
            </production>
            <production>
              <nt>combining-character</nt>
            </production>
          </token>
          <token name="letter-character">
            <production>
              <meta>Unicode alphabetic character (classes Lu, Ll, Lt, Lm, Lo, Nl)</meta>
            </production>
          </token>
          <token name="decimal-character">
            <production>
              <meta>Unicode numeric character (class Nd)</meta>
            </production>
          </token>
          <token name="combining-character">
            <production>
              <meta>Unicode mark character (classes Mn, Mc)</meta>
            </production>
          </token>
          <token name="connector-character">
            <production>
              <meta>Unicode connection character (class Pc)</meta>
            </production>
          </token>
        </grammar>
      </section>
      <section title="Literals">
        <text>
          A <def>literal</def> is a textual representation of a value.
        </text>
        <grammar>
          <token name="literal">
            <production>
              <nt>integer-literal</nt>
            </production>
            <production>
              <nt>floating-point-literal</nt>
            </production>
            <production>
              <nt>string-literal</nt>
            </production>
            <production>
              <nt>domain-specific-literal</nt>
            </production>
          </token>
        </grammar>
        <section title="Integer Literals">
          <text>
            An <def>integer literal</def> is a textual representation of an integral numeric value. Integer literals
            can either be specified in decimal (base 10) or hexadecimal (base 16) notation. Hexadecimal notation is
            prefixed by <c>0x</c> and uses the letters <c>a</c> through <c>f</c> to represent the additional digit
            values.
          </text>
          <grammar>
            <token name="integer-literal">
              <production>
                <nt>decimal-literal</nt>
              </production>
              <production>
                <nt>hexadecimal-literal</nt>
              </production>
            </token>
            <token name="decimal-literal">
              <production>
                <plus>
                  <nt>digit</nt>
                </plus>
              </production>
            </token>
            <token name="digit">
              <production>
                <range>
                  <t>0</t>
                  <t>9</t>
                </range>
              </production>
            </token>
            <token name="hexadecimal-literal">
              <production>
                <t>0x</t>
                <plus>
                  <nt>hexadecimal-digit</nt>
                </plus>
              </production>
            </token>
            <token name="hexadecimal-digit">
              <production>
                <range>
                  <t>0</t>
                  <t>9</t>
                </range>
              </production>
              <production>
                <range>
                  <t>a</t>
                  <t>f</t>
                </range>
              </production>
              <production>
                <range>
                  <t>A</t>
                  <t>F</t>
                </range>
              </production>
            </token>
          </grammar>
        </section>
        <section title="Floating-Point Literals">
          <text>
            A <def>floating-point literal</def> is a textual representation of a real numeric value.
          </text>
          <grammar>
            <token name="floating-point-literal">
              <production>
                <plus>
                  <nt>digit</nt>
                </plus>
                <t>.</t>
                <plus>
                  <nt>digit</nt>
                </plus>
                <opt>
                  <nt>exponent</nt>
                </opt>
              </production>
              <production>
                <plus>
                  <nt>digit</nt>
                </plus>
                <nt>exponent</nt>
              </production>
            </token>
            <token name="exponent">
              <production>
                <nt>exponent-character</nt>
                <opt>
                  <nt>sign</nt>
                </opt>
                <plus>
                  <nt>digit</nt>
                </plus>
              </production>
            </token>
            <token name="exponent-character">
              <production>
                <t>e</t>
              </production>
              <production>
                <t>E</t>
              </production>
            </token>
            <token name="sign">
              <production>
                <t>+</t>
              </production>
              <production>
                <t>-</t>
              </production>
            </token>
          </grammar>
        </section>
        <section title="String Literals">
          <text>
            A <def>string literal</def> is a textual representation of a string value. String literals are delimited by
            double quotes (<c>"</c>), although double quotes can be represented in the string literal by two double
            quotes in a row (i.e. the string literal <c>"""Hello, world!"" she said."</c> represents the string
            <c>"Hello, world!" she said.</c>).
          </text>
          <text>
            String literals support <def>expression holes</def>. An expression hole is delimited by a dollar sign
            followed by curly braces (<c>${}</c>) and contains a Darwin expression. The behavior of expression holes
            is described later in this specification.
          </text>
          <grammar>
            <token name="string-literal">
              <production>
                <t>"</t>
                <star>
                  <nt>string-literal-element</nt>
                </star>
                <t>"</t>
              </production>
            </token>
            <token name="string-literal-element">
              <production>
                <nt>string-literal-character</nt>
              </production>
              <production>
                <nt>string-literal-hole</nt>
              </production>
            </token>
            <token name="string-literal-character">
              <production>
                <meta>Any character except a double quote, open brace, or close brace.</meta>
              </production>
              <production>
                <t>"</t>
                <t>"</t>
              </production>
            </token>
            <token name="string-literal-hole">
              <t>${</t>
              <star>
                <nt>token</nt>
              </star>
              <t>}</t>
            </token>
          </grammar>
        </section>
        <section title="Domain-Specific Literals">
          <text>
            A <def>domain-specific literal</def> is a literal whose language is not part of the Darwin language. For
            example, an XML literal or a JSON literal could be expressed using a domain-specific literal. Domain
            specific literals are delimited by backticks (<c>`</c>) and can contain any Unicode character, including
            line terminators. Inside of a domain-specific literal, a backtick can be represented by two backticks
            (<c>``</c>).
          </text>
          <text>
            Like string literals, domain-specific literals support expression holes. An expression hole is delimited
            by a dollar sign followed by curly braces (<c>${}</c>) and contains a Darwin expression. The behavior of 
            expression holes is described later in this specification.
          </text>
          <grammar>
            <token name="domain-specific-literal">
              <production>
                <t>`</t>
                <star>
                  <nt>domain-specific-literal-element</nt>
                </star>
                <t>`</t>
              </production>
            </token>
            <token name="domain-specific-literal-element">
              <production>
                <nt>domain-specific-literal-character</nt>
              </production>
              <production>
                <nt>domain-specific-literal-hole</nt>
              </production>
            </token>
            <token name="domain-specific-literal-character">
              <production>
                <meta>Any character except a back tick (`).</meta>
              </production>
              <production>
                <t>`</t>
                <t>`</t>
              </production>
            </token>
            <token name="domain-specific-literal-hole">
              <t>${</t>
              <star>
                <nt>token</nt>
              </star>
              <t>}</t>
            </token>
          </grammar>
        </section>
      </section>
      <section title="Punctuators">
        <text>
          A <def>punctuator</def> serves to delimit syntatic structures.
        </text>
        <alert>
          <em>Note:</em> Some operators are also used as punctuators in the syntactic language.
        </alert>
        <grammar>
          <token name="punctuator">
            <production>
              <t>(</t>
            </production>
            <production>
              <t>)</t>
            </production>
            <production>
              <t>{</t>
            </production>
            <production>
              <t>}</t>
            </production>
            <production>
              <t>[</t>
            </production>
            <production>
              <t>]</t>
            </production>
            <production>
              <t>,</t>
            </production>
            <production>
              <t>;</t>
            </production>
            <production>
              <t>:</t>
            </production>
          </token>
        </grammar>
      </section>
      <section title="Operators">
        <text>
          An <def>operator</def> specifies an operation in the language.
        </text>
        <grammar>
          <token name="operator">
            <production>
              <plus>
                <nt>operators</nt>
              </plus>
            </production>
          </token>
          <token name="operators">
            <production>
              <t>~</t>
            </production>
            <production>
              <t>!</t>
            </production>
            <production>
              <t>@</t>
            </production>
            <production>
              <t>$</t>
            </production>
            <production>
              <t>%</t>
            </production>
            <production>
              <t>^</t>
            </production>
            <production>
              <t>&amp;</t>
            </production>
            <production>
              <t>*</t>
            </production>
            <production>
              <t>-</t>
            </production>
            <production>
              <t>+</t>
            </production>
            <production>
              <t>=</t>
            </production>
            <production>
              <t>\</t>
            </production>
            <production>
              <t>|</t>
            </production>
            <production>
              <t>&lt;</t>
            </production>
            <production>
              <t>&gt;</t>
            </production>
            <production>
              <t>.</t>
            </production>
            <production>
              <t>?</t>
            </production>
            <production>
              <t>/</t>
            </production>
          </token>
        </grammar>
      </section>
    </section>
  </body>
</specification>